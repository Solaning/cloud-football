package com.kinth.football.dao;

import java.util.List;
import com.kinth.football.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import android.os.Parcelable;
import android.os.Parcel;
// KEEP INCLUDES END
/**
 * Entity mapped to table TEAM.
 */
public class Team implements Parcelable {

    /** Not-null value. */
    private String uuid;
    private String name;
    private String slogan;
    private String description;
    private String badge;
    private String familyPhoto;
    private Long date;
    private String creatorUuid;
    private String firstCaptainUuid;
    private String secondCaptainUuid;
    private String thirdCaptainUuid;
    private Integer cityId;
    private Integer regionId;
    private String homeField;
    private String homeJersey;
    private String roadJersey;
    private String alternateJersey;
    private Integer like;
    private Boolean liked;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TeamDao myDao;

    private List<TeamPlayer> teamPlayerList;
    private List<MatchTeam> matchTeamList;
    private List<FormationDB> formationDBList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Team() {
    }

    public Team(String uuid) {
        this.uuid = uuid;
    }

    public Team(String uuid, String name, String slogan, String description, String badge, String familyPhoto, Long date, String creatorUuid, String firstCaptainUuid, String secondCaptainUuid, String thirdCaptainUuid, Integer cityId, Integer regionId, String homeField, String homeJersey, String roadJersey, String alternateJersey, Integer like, Boolean liked) {
        this.uuid = uuid;
        this.name = name;
        this.slogan = slogan;
        this.description = description;
        this.badge = badge;
        this.familyPhoto = familyPhoto;
        this.date = date;
        this.creatorUuid = creatorUuid;
        this.firstCaptainUuid = firstCaptainUuid;
        this.secondCaptainUuid = secondCaptainUuid;
        this.thirdCaptainUuid = thirdCaptainUuid;
        this.cityId = cityId;
        this.regionId = regionId;
        this.homeField = homeField;
        this.homeJersey = homeJersey;
        this.roadJersey = roadJersey;
        this.alternateJersey = alternateJersey;
        this.like = like;
        this.liked = liked;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTeamDao() : null;
    }

    /** Not-null value. */
    public String getUuid() {
        return uuid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSlogan() {
        return slogan;
    }

    public void setSlogan(String slogan) {
        this.slogan = slogan;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getBadge() {
        return badge;
    }

    public void setBadge(String badge) {
        this.badge = badge;
    }

    public String getFamilyPhoto() {
        return familyPhoto;
    }

    public void setFamilyPhoto(String familyPhoto) {
        this.familyPhoto = familyPhoto;
    }

    public Long getDate() {
        return date;
    }

    public void setDate(Long date) {
        this.date = date;
    }

    public String getCreatorUuid() {
        return creatorUuid;
    }

    public void setCreatorUuid(String creatorUuid) {
        this.creatorUuid = creatorUuid;
    }

    public String getFirstCaptainUuid() {
        return firstCaptainUuid;
    }

    public void setFirstCaptainUuid(String firstCaptainUuid) {
        this.firstCaptainUuid = firstCaptainUuid;
    }

    public String getSecondCaptainUuid() {
        return secondCaptainUuid;
    }

    public void setSecondCaptainUuid(String secondCaptainUuid) {
        this.secondCaptainUuid = secondCaptainUuid;
    }

    public String getThirdCaptainUuid() {
        return thirdCaptainUuid;
    }

    public void setThirdCaptainUuid(String thirdCaptainUuid) {
        this.thirdCaptainUuid = thirdCaptainUuid;
    }

    public Integer getCityId() {
        return cityId;
    }

    public void setCityId(Integer cityId) {
        this.cityId = cityId;
    }

    public Integer getRegionId() {
        return regionId;
    }

    public void setRegionId(Integer regionId) {
        this.regionId = regionId;
    }

    public String getHomeField() {
        return homeField;
    }

    public void setHomeField(String homeField) {
        this.homeField = homeField;
    }

    public String getHomeJersey() {
        return homeJersey;
    }

    public void setHomeJersey(String homeJersey) {
        this.homeJersey = homeJersey;
    }

    public String getRoadJersey() {
        return roadJersey;
    }

    public void setRoadJersey(String roadJersey) {
        this.roadJersey = roadJersey;
    }

    public String getAlternateJersey() {
        return alternateJersey;
    }

    public void setAlternateJersey(String alternateJersey) {
        this.alternateJersey = alternateJersey;
    }

    public Integer getLike() {
        return like;
    }

    public void setLike(Integer like) {
        this.like = like;
    }

    public Boolean getLiked() {
        return liked;
    }

    public void setLiked(Boolean liked) {
        this.liked = liked;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TeamPlayer> getTeamPlayerList() {
        if (teamPlayerList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TeamPlayerDao targetDao = daoSession.getTeamPlayerDao();
            List<TeamPlayer> teamPlayerListNew = targetDao._queryTeam_TeamPlayerList(uuid);
            synchronized (this) {
                if(teamPlayerList == null) {
                    teamPlayerList = teamPlayerListNew;
                }
            }
        }
        return teamPlayerList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTeamPlayerList() {
        teamPlayerList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MatchTeam> getMatchTeamList() {
        if (matchTeamList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MatchTeamDao targetDao = daoSession.getMatchTeamDao();
            List<MatchTeam> matchTeamListNew = targetDao._queryTeam_MatchTeamList(uuid);
            synchronized (this) {
                if(matchTeamList == null) {
                    matchTeamList = matchTeamListNew;
                }
            }
        }
        return matchTeamList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMatchTeamList() {
        matchTeamList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<FormationDB> getFormationDBList() {
        if (formationDBList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FormationDBDao targetDao = daoSession.getFormationDBDao();
            List<FormationDB> formationDBListNew = targetDao._queryTeam_FormationDBList(uuid);
            synchronized (this) {
                if(formationDBList == null) {
                    formationDBList = formationDBListNew;
                }
            }
        }
        return formationDBList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFormationDBList() {
        formationDBList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
	public static final Parcelable.Creator<Team> CREATOR = new Creator<Team>() {
		@Override
		public Team createFromParcel(Parcel parcel) {
			Team team = new Team();
			team.uuid = parcel.readString();
			team.name = parcel.readString();
			team.slogan = parcel.readString();
			team.description= parcel.readString();
			team.badge = parcel.readString();
			team.familyPhoto = parcel.readString();
			team.date = parcel.readLong();
			team.creatorUuid = parcel.readString();
			team.firstCaptainUuid = parcel.readString();
			team.secondCaptainUuid = parcel.readString();
			team.thirdCaptainUuid = parcel.readString();
			team.cityId = parcel.readInt();
			team.regionId = parcel.readInt();
			team.homeField = parcel.readString();
			team.homeJersey = parcel.readString();
			team.roadJersey = parcel.readString();
			team.alternateJersey = parcel.readString();
			team.like = parcel.readInt();
			team.liked = parcel.readByte() != 0;
			return team;
		}

		@Override
		public Team[] newArray(int size) {
			// TODO Auto-generated method stub
			return new Team[size];
		}
	};
	
	@Override
	public int describeContents() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeString(this.uuid);
		dest.writeString(this.name);
		dest.writeString(this.slogan);
		dest.writeString(this.description);
		dest.writeString(this.badge);
		dest.writeString(this.familyPhoto);
		dest.writeLong(this.date == null ? 0l : this.date);
		dest.writeString(this.creatorUuid);
		dest.writeString(this.firstCaptainUuid);
		dest.writeString(this.secondCaptainUuid);
		dest.writeString(this.thirdCaptainUuid);
		dest.writeInt(this.cityId == null ? 0 : this.cityId);
		dest.writeInt(this.regionId == null ? 0 : this.regionId);
		dest.writeString(this.homeField);
		dest.writeString(this.homeJersey);
		dest.writeString(this.roadJersey);
		dest.writeString(this.alternateJersey);
		dest.writeInt(this.like == null ? 0 : this.like);
		dest.writeByte((byte)(liked == null ? 0 : liked ? 1 : 0));
	}
    // KEEP METHODS END

}
