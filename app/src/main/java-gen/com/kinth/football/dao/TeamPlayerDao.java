package com.kinth.football.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.kinth.football.dao.TeamPlayer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TEAM_PLAYER.
*/
public class TeamPlayerDao extends AbstractDao<TeamPlayer, Long> {

    public static final String TABLENAME = "TEAM_PLAYER";

    /**
     * Properties of entity TeamPlayer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Player_id = new Property(1, String.class, "player_id", false, "PLAYER_ID");
        public final static Property Team_id = new Property(2, String.class, "team_id", false, "TEAM_ID");
        public final static Property Creator = new Property(3, Boolean.class, "creator", false, "CREATOR");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
    };

    private Query<TeamPlayer> player_TeamPlayerListQuery;
    private Query<TeamPlayer> team_TeamPlayerListQuery;

    public TeamPlayerDao(DaoConfig config) {
        super(config);
    }
    
    public TeamPlayerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TEAM_PLAYER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PLAYER_ID' TEXT NOT NULL ," + // 1: player_id
                "'TEAM_ID' TEXT NOT NULL ," + // 2: team_id
                "'CREATOR' INTEGER," + // 3: creator
                "'TYPE' TEXT);"); // 4: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TEAM_PLAYER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TeamPlayer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPlayer_id());
        stmt.bindString(3, entity.getTeam_id());
 
        Boolean creator = entity.getCreator();
        if (creator != null) {
            stmt.bindLong(4, creator ? 1l: 0l);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TeamPlayer readEntity(Cursor cursor, int offset) {
        TeamPlayer entity = new TeamPlayer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // player_id
            cursor.getString(offset + 2), // team_id
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // creator
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TeamPlayer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlayer_id(cursor.getString(offset + 1));
        entity.setTeam_id(cursor.getString(offset + 2));
        entity.setCreator(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TeamPlayer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TeamPlayer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "teamPlayerList" to-many relationship of Player. */
    public List<TeamPlayer> _queryPlayer_TeamPlayerList(String player_id) {
        synchronized (this) {
            if (player_TeamPlayerListQuery == null) {
                QueryBuilder<TeamPlayer> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Player_id.eq(null));
                player_TeamPlayerListQuery = queryBuilder.build();
            }
        }
        Query<TeamPlayer> query = player_TeamPlayerListQuery.forCurrentThread();
        query.setParameter(0, player_id);
        return query.list();
    }

    /** Internal query to resolve the "teamPlayerList" to-many relationship of Team. */
    public List<TeamPlayer> _queryTeam_TeamPlayerList(String team_id) {
        synchronized (this) {
            if (team_TeamPlayerListQuery == null) {
                QueryBuilder<TeamPlayer> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Team_id.eq(null));
                team_TeamPlayerListQuery = queryBuilder.build();
            }
        }
        Query<TeamPlayer> query = team_TeamPlayerListQuery.forCurrentThread();
        query.setParameter(0, team_id);
        return query.list();
    }

}
