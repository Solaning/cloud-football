package com.kinth.football.dao;

import java.util.List;
import com.kinth.football.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table MATCH_TEAM.
 */
public class MatchTeam {

    private Long id;
    private String match_id;
    private String team_id;
    private Integer home_match;
    private Integer score;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MatchTeamDao myDao;

    private List<MatchTeamPlayer> matchTeamPlayerList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public MatchTeam() {
    }

    public MatchTeam(Long id) {
        this.id = id;
    }

    public MatchTeam(Long id, String match_id, String team_id, Integer home_match, Integer score) {
        this.id = id;
        this.match_id = match_id;
        this.team_id = team_id;
        this.home_match = home_match;
        this.score = score;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMatchTeamDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getMatch_id() {
        return match_id;
    }

    public void setMatch_id(String match_id) {
        this.match_id = match_id;
    }

    public String getTeam_id() {
        return team_id;
    }

    public void setTeam_id(String team_id) {
        this.team_id = team_id;
    }

    public Integer getHome_match() {
        return home_match;
    }

    public void setHome_match(Integer home_match) {
        this.home_match = home_match;
    }

    public Integer getScore() {
        return score;
    }

    public void setScore(Integer score) {
        this.score = score;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MatchTeamPlayer> getMatchTeamPlayerList() {
        if (matchTeamPlayerList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MatchTeamPlayerDao targetDao = daoSession.getMatchTeamPlayerDao();
            List<MatchTeamPlayer> matchTeamPlayerListNew = targetDao._queryMatchTeam_MatchTeamPlayerList(id);
            synchronized (this) {
                if(matchTeamPlayerList == null) {
                    matchTeamPlayerList = matchTeamPlayerListNew;
                }
            }
        }
        return matchTeamPlayerList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMatchTeamPlayerList() {
        matchTeamPlayerList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
