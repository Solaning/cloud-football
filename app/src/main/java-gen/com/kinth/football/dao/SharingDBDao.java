package com.kinth.football.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kinth.football.dao.SharingDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SHARING_DB.
*/
public class SharingDBDao extends AbstractDao<SharingDB, String> {

    public static final String TABLENAME = "SHARING_DB";

    /**
     * Properties of entity SharingDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uuid = new Property(0, String.class, "uuid", true, "UUID");
        public final static Property Date = new Property(1, Long.class, "date", false, "DATE");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Comment = new Property(3, String.class, "comment", false, "COMMENT");
        public final static Property Url = new Property(4, String.class, "url", false, "URL");
        public final static Property ImageUrls = new Property(5, String.class, "imageUrls", false, "IMAGE_URLS");
        public final static Property PlayerUuid = new Property(6, String.class, "playerUuid", false, "PLAYER_UUID");
    };


    public SharingDBDao(DaoConfig config) {
        super(config);
    }
    
    public SharingDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SHARING_DB' (" + //
                "'UUID' TEXT PRIMARY KEY NOT NULL ," + // 0: uuid
                "'DATE' INTEGER," + // 1: date
                "'TYPE' TEXT," + // 2: type
                "'COMMENT' TEXT," + // 3: comment
                "'URL' TEXT," + // 4: url
                "'IMAGE_URLS' TEXT," + // 5: imageUrls
                "'PLAYER_UUID' TEXT);"); // 6: playerUuid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SHARING_DB'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SharingDB entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUuid());
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(4, comment);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
 
        String imageUrls = entity.getImageUrls();
        if (imageUrls != null) {
            stmt.bindString(6, imageUrls);
        }
 
        String playerUuid = entity.getPlayerUuid();
        if (playerUuid != null) {
            stmt.bindString(7, playerUuid);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SharingDB readEntity(Cursor cursor, int offset) {
        SharingDB entity = new SharingDB( //
            cursor.getString(offset + 0), // uuid
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // comment
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // imageUrls
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // playerUuid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SharingDB entity, int offset) {
        entity.setUuid(cursor.getString(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setComment(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImageUrls(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPlayerUuid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(SharingDB entity, long rowId) {
        return entity.getUuid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(SharingDB entity) {
        if(entity != null) {
            return entity.getUuid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
