package com.kinth.football.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.kinth.football.dao.MatchTeam;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MATCH_TEAM.
*/
public class MatchTeamDao extends AbstractDao<MatchTeam, Long> {

    public static final String TABLENAME = "MATCH_TEAM";

    /**
     * Properties of entity MatchTeam.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Match_id = new Property(1, String.class, "match_id", false, "MATCH_ID");
        public final static Property Team_id = new Property(2, String.class, "team_id", false, "TEAM_ID");
        public final static Property Home_match = new Property(3, Integer.class, "home_match", false, "HOME_MATCH");
        public final static Property Score = new Property(4, Integer.class, "score", false, "SCORE");
    };

    private DaoSession daoSession;

    private Query<MatchTeam> team_MatchTeamListQuery;
    private Query<MatchTeam> match_MatchTeamListQuery;

    public MatchTeamDao(DaoConfig config) {
        super(config);
    }
    
    public MatchTeamDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MATCH_TEAM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MATCH_ID' TEXT," + // 1: match_id
                "'TEAM_ID' TEXT," + // 2: team_id
                "'HOME_MATCH' INTEGER," + // 3: home_match
                "'SCORE' INTEGER);"); // 4: score
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MATCH_TEAM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MatchTeam entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String match_id = entity.getMatch_id();
        if (match_id != null) {
            stmt.bindString(2, match_id);
        }
 
        String team_id = entity.getTeam_id();
        if (team_id != null) {
            stmt.bindString(3, team_id);
        }
 
        Integer home_match = entity.getHome_match();
        if (home_match != null) {
            stmt.bindLong(4, home_match);
        }
 
        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(5, score);
        }
    }

    @Override
    protected void attachEntity(MatchTeam entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MatchTeam readEntity(Cursor cursor, int offset) {
        MatchTeam entity = new MatchTeam( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // match_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // team_id
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // home_match
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // score
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MatchTeam entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMatch_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTeam_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHome_match(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setScore(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MatchTeam entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MatchTeam entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "matchTeamList" to-many relationship of Team. */
    public List<MatchTeam> _queryTeam_MatchTeamList(String team_id) {
        synchronized (this) {
            if (team_MatchTeamListQuery == null) {
                QueryBuilder<MatchTeam> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Team_id.eq(null));
                team_MatchTeamListQuery = queryBuilder.build();
            }
        }
        Query<MatchTeam> query = team_MatchTeamListQuery.forCurrentThread();
        query.setParameter(0, team_id);
        return query.list();
    }

    /** Internal query to resolve the "matchTeamList" to-many relationship of Match. */
    public List<MatchTeam> _queryMatch_MatchTeamList(String match_id) {
        synchronized (this) {
            if (match_MatchTeamListQuery == null) {
                QueryBuilder<MatchTeam> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Match_id.eq(null));
                match_MatchTeamListQuery = queryBuilder.build();
            }
        }
        Query<MatchTeam> query = match_MatchTeamListQuery.forCurrentThread();
        query.setParameter(0, match_id);
        return query.list();
    }

}
