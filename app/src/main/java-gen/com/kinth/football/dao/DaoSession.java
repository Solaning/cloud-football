package com.kinth.football.dao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import com.kinth.football.dao.PushMessage;
import com.kinth.football.dao.Player;
import com.kinth.football.dao.Team;
import com.kinth.football.dao.TeamPlayer;
import com.kinth.football.dao.Match;
import com.kinth.football.dao.MatchTeam;
import com.kinth.football.dao.MatchTeamPlayer;
import com.kinth.football.dao.FormationDB;
import com.kinth.football.dao.Chat;
import com.kinth.football.dao.Recent;
import com.kinth.football.dao.SharingDB;
import com.kinth.football.dao.CommentDB;

import com.kinth.football.dao.PushMessageDao;
import com.kinth.football.dao.PlayerDao;
import com.kinth.football.dao.TeamDao;
import com.kinth.football.dao.TeamPlayerDao;
import com.kinth.football.dao.MatchDao;
import com.kinth.football.dao.MatchTeamDao;
import com.kinth.football.dao.MatchTeamPlayerDao;
import com.kinth.football.dao.FormationDBDao;
import com.kinth.football.dao.ChatDao;
import com.kinth.football.dao.RecentDao;
import com.kinth.football.dao.SharingDBDao;
import com.kinth.football.dao.CommentDBDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig pushMessageDaoConfig;
    private final DaoConfig playerDaoConfig;
    private final DaoConfig teamDaoConfig;
    private final DaoConfig teamPlayerDaoConfig;
    private final DaoConfig matchDaoConfig;
    private final DaoConfig matchTeamDaoConfig;
    private final DaoConfig matchTeamPlayerDaoConfig;
    private final DaoConfig formationDBDaoConfig;
    private final DaoConfig chatDaoConfig;
    private final DaoConfig recentDaoConfig;
    private final DaoConfig sharingDBDaoConfig;
    private final DaoConfig commentDBDaoConfig;

    private final PushMessageDao pushMessageDao;
    private final PlayerDao playerDao;
    private final TeamDao teamDao;
    private final TeamPlayerDao teamPlayerDao;
    private final MatchDao matchDao;
    private final MatchTeamDao matchTeamDao;
    private final MatchTeamPlayerDao matchTeamPlayerDao;
    private final FormationDBDao formationDBDao;
    private final ChatDao chatDao;
    private final RecentDao recentDao;
    private final SharingDBDao sharingDBDao;
    private final CommentDBDao commentDBDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        pushMessageDaoConfig = daoConfigMap.get(PushMessageDao.class).clone();
        pushMessageDaoConfig.initIdentityScope(type);

        playerDaoConfig = daoConfigMap.get(PlayerDao.class).clone();
        playerDaoConfig.initIdentityScope(type);

        teamDaoConfig = daoConfigMap.get(TeamDao.class).clone();
        teamDaoConfig.initIdentityScope(type);

        teamPlayerDaoConfig = daoConfigMap.get(TeamPlayerDao.class).clone();
        teamPlayerDaoConfig.initIdentityScope(type);

        matchDaoConfig = daoConfigMap.get(MatchDao.class).clone();
        matchDaoConfig.initIdentityScope(type);

        matchTeamDaoConfig = daoConfigMap.get(MatchTeamDao.class).clone();
        matchTeamDaoConfig.initIdentityScope(type);

        matchTeamPlayerDaoConfig = daoConfigMap.get(MatchTeamPlayerDao.class).clone();
        matchTeamPlayerDaoConfig.initIdentityScope(type);

        formationDBDaoConfig = daoConfigMap.get(FormationDBDao.class).clone();
        formationDBDaoConfig.initIdentityScope(type);

        chatDaoConfig = daoConfigMap.get(ChatDao.class).clone();
        chatDaoConfig.initIdentityScope(type);

        recentDaoConfig = daoConfigMap.get(RecentDao.class).clone();
        recentDaoConfig.initIdentityScope(type);

        sharingDBDaoConfig = daoConfigMap.get(SharingDBDao.class).clone();
        sharingDBDaoConfig.initIdentityScope(type);

        commentDBDaoConfig = daoConfigMap.get(CommentDBDao.class).clone();
        commentDBDaoConfig.initIdentityScope(type);

        pushMessageDao = new PushMessageDao(pushMessageDaoConfig, this);
        playerDao = new PlayerDao(playerDaoConfig, this);
        teamDao = new TeamDao(teamDaoConfig, this);
        teamPlayerDao = new TeamPlayerDao(teamPlayerDaoConfig, this);
        matchDao = new MatchDao(matchDaoConfig, this);
        matchTeamDao = new MatchTeamDao(matchTeamDaoConfig, this);
        matchTeamPlayerDao = new MatchTeamPlayerDao(matchTeamPlayerDaoConfig, this);
        formationDBDao = new FormationDBDao(formationDBDaoConfig, this);
        chatDao = new ChatDao(chatDaoConfig, this);
        recentDao = new RecentDao(recentDaoConfig, this);
        sharingDBDao = new SharingDBDao(sharingDBDaoConfig, this);
        commentDBDao = new CommentDBDao(commentDBDaoConfig, this);

        registerDao(PushMessage.class, pushMessageDao);
        registerDao(Player.class, playerDao);
        registerDao(Team.class, teamDao);
        registerDao(TeamPlayer.class, teamPlayerDao);
        registerDao(Match.class, matchDao);
        registerDao(MatchTeam.class, matchTeamDao);
        registerDao(MatchTeamPlayer.class, matchTeamPlayerDao);
        registerDao(FormationDB.class, formationDBDao);
        registerDao(Chat.class, chatDao);
        registerDao(Recent.class, recentDao);
        registerDao(SharingDB.class, sharingDBDao);
        registerDao(CommentDB.class, commentDBDao);
    }
    
    public void clear() {
        pushMessageDaoConfig.getIdentityScope().clear();
        playerDaoConfig.getIdentityScope().clear();
        teamDaoConfig.getIdentityScope().clear();
        teamPlayerDaoConfig.getIdentityScope().clear();
        matchDaoConfig.getIdentityScope().clear();
        matchTeamDaoConfig.getIdentityScope().clear();
        matchTeamPlayerDaoConfig.getIdentityScope().clear();
        formationDBDaoConfig.getIdentityScope().clear();
        chatDaoConfig.getIdentityScope().clear();
        recentDaoConfig.getIdentityScope().clear();
        sharingDBDaoConfig.getIdentityScope().clear();
        commentDBDaoConfig.getIdentityScope().clear();
    }

    public PushMessageDao getPushMessageDao() {
        return pushMessageDao;
    }

    public PlayerDao getPlayerDao() {
        return playerDao;
    }

    public TeamDao getTeamDao() {
        return teamDao;
    }

    public TeamPlayerDao getTeamPlayerDao() {
        return teamPlayerDao;
    }

    public MatchDao getMatchDao() {
        return matchDao;
    }

    public MatchTeamDao getMatchTeamDao() {
        return matchTeamDao;
    }

    public MatchTeamPlayerDao getMatchTeamPlayerDao() {
        return matchTeamPlayerDao;
    }

    public FormationDBDao getFormationDBDao() {
        return formationDBDao;
    }

    public ChatDao getChatDao() {
        return chatDao;
    }

    public RecentDao getRecentDao() {
        return recentDao;
    }

    public SharingDBDao getSharingDBDao() {
        return sharingDBDao;
    }

    public CommentDBDao getCommentDBDao() {
        return commentDBDao;
    }

}
