package com.kinth.football.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.kinth.football.dao.FormationDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FORMATION_DB.
*/
public class FormationDBDao extends AbstractDao<FormationDB, String> {

    public static final String TABLENAME = "FORMATION_DB";

    /**
     * Properties of entity FormationDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uuid = new Property(0, String.class, "uuid", true, "UUID");
        public final static Property Description = new Property(1, String.class, "description", false, "DESCRIPTION");
        public final static Property Image = new Property(2, String.class, "image", false, "IMAGE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Player_id = new Property(4, String.class, "player_id", false, "PLAYER_ID");
        public final static Property Team_id = new Property(5, String.class, "team_id", false, "TEAM_ID");
    };

    private DaoSession daoSession;

    private Query<FormationDB> player_FormationDBListQuery;
    private Query<FormationDB> team_FormationDBListQuery;

    public FormationDBDao(DaoConfig config) {
        super(config);
    }
    
    public FormationDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FORMATION_DB' (" + //
                "'UUID' TEXT PRIMARY KEY NOT NULL ," + // 0: uuid
                "'DESCRIPTION' TEXT," + // 1: description
                "'IMAGE' TEXT," + // 2: image
                "'NAME' TEXT," + // 3: name
                "'PLAYER_ID' TEXT NOT NULL ," + // 4: player_id
                "'TEAM_ID' TEXT NOT NULL );"); // 5: team_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FORMATION_DB'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FormationDB entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUuid());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(2, description);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(3, image);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindString(5, entity.getPlayer_id());
        stmt.bindString(6, entity.getTeam_id());
    }

    @Override
    protected void attachEntity(FormationDB entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FormationDB readEntity(Cursor cursor, int offset) {
        FormationDB entity = new FormationDB( //
            cursor.getString(offset + 0), // uuid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // description
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // image
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.getString(offset + 4), // player_id
            cursor.getString(offset + 5) // team_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FormationDB entity, int offset) {
        entity.setUuid(cursor.getString(offset + 0));
        entity.setDescription(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPlayer_id(cursor.getString(offset + 4));
        entity.setTeam_id(cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(FormationDB entity, long rowId) {
        return entity.getUuid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(FormationDB entity) {
        if(entity != null) {
            return entity.getUuid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "formationDBList" to-many relationship of Player. */
    public List<FormationDB> _queryPlayer_FormationDBList(String player_id) {
        synchronized (this) {
            if (player_FormationDBListQuery == null) {
                QueryBuilder<FormationDB> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Player_id.eq(null));
                player_FormationDBListQuery = queryBuilder.build();
            }
        }
        Query<FormationDB> query = player_FormationDBListQuery.forCurrentThread();
        query.setParameter(0, player_id);
        return query.list();
    }

    /** Internal query to resolve the "formationDBList" to-many relationship of Team. */
    public List<FormationDB> _queryTeam_FormationDBList(String team_id) {
        synchronized (this) {
            if (team_FormationDBListQuery == null) {
                QueryBuilder<FormationDB> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Team_id.eq(null));
                team_FormationDBListQuery = queryBuilder.build();
            }
        }
        Query<FormationDB> query = team_FormationDBListQuery.forCurrentThread();
        query.setParameter(0, team_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPlayerDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getTeamDao().getAllColumns());
            builder.append(" FROM FORMATION_DB T");
            builder.append(" LEFT JOIN PLAYER T0 ON T.'UUID'=T0.'UUID'");
            builder.append(" LEFT JOIN TEAM T1 ON T.'UUID'=T1.'UUID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected FormationDB loadCurrentDeep(Cursor cursor, boolean lock) {
        FormationDB entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Player player = loadCurrentOther(daoSession.getPlayerDao(), cursor, offset);
         if(player != null) {
            entity.setPlayer(player);
        }
        offset += daoSession.getPlayerDao().getAllColumns().length;

        Team team = loadCurrentOther(daoSession.getTeamDao(), cursor, offset);
         if(team != null) {
            entity.setTeam(team);
        }

        return entity;    
    }

    public FormationDB loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<FormationDB> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<FormationDB> list = new ArrayList<FormationDB>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<FormationDB> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<FormationDB> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
