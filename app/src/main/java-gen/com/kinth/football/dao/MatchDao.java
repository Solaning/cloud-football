package com.kinth.football.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kinth.football.dao.Match;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MATCH.
*/
public class MatchDao extends AbstractDao<Match, String> {

    public static final String TABLENAME = "MATCH";

    /**
     * Properties of entity Match.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uuid = new Property(0, String.class, "uuid", true, "UUID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Field = new Property(2, String.class, "field", false, "FIELD");
        public final static Property KickOff = new Property(3, Long.class, "kickOff", false, "KICK_OFF");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property State = new Property(5, String.class, "state", false, "STATE");
        public final static Property Date = new Property(6, Long.class, "date", false, "DATE");
        public final static Property PlayerCount = new Property(7, Integer.class, "playerCount", false, "PLAYER_COUNT");
        public final static Property HomeTeamScore = new Property(8, Integer.class, "homeTeamScore", false, "HOME_TEAM_SCORE");
        public final static Property AwayTeamScore = new Property(9, Integer.class, "awayTeamScore", false, "AWAY_TEAM_SCORE");
        public final static Property HomeTeamLike = new Property(10, Integer.class, "homeTeamLike", false, "HOME_TEAM_LIKE");
        public final static Property AwayTeamLike = new Property(11, Integer.class, "awayTeamLike", false, "AWAY_TEAM_LIKE");
        public final static Property Referee_id = new Property(12, String.class, "referee_id", false, "REFEREE_ID");
        public final static Property Creator_id = new Property(13, String.class, "creator_id", false, "CREATOR_ID");
        public final static Property Cost = new Property(14, Float.class, "cost", false, "COST");
        public final static Property HomeTeamJersey = new Property(15, String.class, "homeTeamJersey", false, "HOME_TEAM_JERSEY");
        public final static Property AwayTeamJersey = new Property(16, String.class, "awayTeamJersey", false, "AWAY_TEAM_JERSEY");
        public final static Property HomeTeamFormation_id = new Property(17, String.class, "homeTeamFormation_id", false, "HOME_TEAM_FORMATION_ID");
        public final static Property AwayTeamFormation_id = new Property(18, String.class, "awayTeamFormation_id", false, "AWAY_TEAM_FORMATION_ID");
    };

    private DaoSession daoSession;


    public MatchDao(DaoConfig config) {
        super(config);
    }
    
    public MatchDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MATCH' (" + //
                "'UUID' TEXT PRIMARY KEY NOT NULL ," + // 0: uuid
                "'NAME' TEXT," + // 1: name
                "'FIELD' TEXT," + // 2: field
                "'KICK_OFF' INTEGER," + // 3: kickOff
                "'TYPE' TEXT," + // 4: type
                "'STATE' TEXT," + // 5: state
                "'DATE' INTEGER," + // 6: date
                "'PLAYER_COUNT' INTEGER," + // 7: playerCount
                "'HOME_TEAM_SCORE' INTEGER," + // 8: homeTeamScore
                "'AWAY_TEAM_SCORE' INTEGER," + // 9: awayTeamScore
                "'HOME_TEAM_LIKE' INTEGER," + // 10: homeTeamLike
                "'AWAY_TEAM_LIKE' INTEGER," + // 11: awayTeamLike
                "'REFEREE_ID' TEXT," + // 12: referee_id
                "'CREATOR_ID' TEXT," + // 13: creator_id
                "'COST' REAL," + // 14: cost
                "'HOME_TEAM_JERSEY' TEXT," + // 15: homeTeamJersey
                "'AWAY_TEAM_JERSEY' TEXT," + // 16: awayTeamJersey
                "'HOME_TEAM_FORMATION_ID' TEXT," + // 17: homeTeamFormation_id
                "'AWAY_TEAM_FORMATION_ID' TEXT);"); // 18: awayTeamFormation_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MATCH'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Match entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUuid());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String field = entity.getField();
        if (field != null) {
            stmt.bindString(3, field);
        }
 
        Long kickOff = entity.getKickOff();
        if (kickOff != null) {
            stmt.bindLong(4, kickOff);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(6, state);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(7, date);
        }
 
        Integer playerCount = entity.getPlayerCount();
        if (playerCount != null) {
            stmt.bindLong(8, playerCount);
        }
 
        Integer homeTeamScore = entity.getHomeTeamScore();
        if (homeTeamScore != null) {
            stmt.bindLong(9, homeTeamScore);
        }
 
        Integer awayTeamScore = entity.getAwayTeamScore();
        if (awayTeamScore != null) {
            stmt.bindLong(10, awayTeamScore);
        }
 
        Integer homeTeamLike = entity.getHomeTeamLike();
        if (homeTeamLike != null) {
            stmt.bindLong(11, homeTeamLike);
        }
 
        Integer awayTeamLike = entity.getAwayTeamLike();
        if (awayTeamLike != null) {
            stmt.bindLong(12, awayTeamLike);
        }
 
        String referee_id = entity.getReferee_id();
        if (referee_id != null) {
            stmt.bindString(13, referee_id);
        }
 
        String creator_id = entity.getCreator_id();
        if (creator_id != null) {
            stmt.bindString(14, creator_id);
        }
 
        Float cost = entity.getCost();
        if (cost != null) {
            stmt.bindDouble(15, cost);
        }
 
        String homeTeamJersey = entity.getHomeTeamJersey();
        if (homeTeamJersey != null) {
            stmt.bindString(16, homeTeamJersey);
        }
 
        String awayTeamJersey = entity.getAwayTeamJersey();
        if (awayTeamJersey != null) {
            stmt.bindString(17, awayTeamJersey);
        }
 
        String homeTeamFormation_id = entity.getHomeTeamFormation_id();
        if (homeTeamFormation_id != null) {
            stmt.bindString(18, homeTeamFormation_id);
        }
 
        String awayTeamFormation_id = entity.getAwayTeamFormation_id();
        if (awayTeamFormation_id != null) {
            stmt.bindString(19, awayTeamFormation_id);
        }
    }

    @Override
    protected void attachEntity(Match entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Match readEntity(Cursor cursor, int offset) {
        Match entity = new Match( //
            cursor.getString(offset + 0), // uuid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // field
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // kickOff
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // state
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // date
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // playerCount
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // homeTeamScore
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // awayTeamScore
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // homeTeamLike
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // awayTeamLike
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // referee_id
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // creator_id
            cursor.isNull(offset + 14) ? null : cursor.getFloat(offset + 14), // cost
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // homeTeamJersey
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // awayTeamJersey
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // homeTeamFormation_id
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // awayTeamFormation_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Match entity, int offset) {
        entity.setUuid(cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setField(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setKickOff(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setState(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDate(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setPlayerCount(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setHomeTeamScore(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setAwayTeamScore(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setHomeTeamLike(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setAwayTeamLike(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setReferee_id(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCreator_id(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCost(cursor.isNull(offset + 14) ? null : cursor.getFloat(offset + 14));
        entity.setHomeTeamJersey(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAwayTeamJersey(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setHomeTeamFormation_id(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAwayTeamFormation_id(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Match entity, long rowId) {
        return entity.getUuid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Match entity) {
        if(entity != null) {
            return entity.getUuid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
