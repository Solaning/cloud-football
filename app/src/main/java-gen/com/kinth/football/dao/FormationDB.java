package com.kinth.football.dao;

import com.kinth.football.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table FORMATION_DB.
 */
public class FormationDB {

    /** Not-null value. */
    private String uuid;
    private String description;
    private String image;
    private String name;
    /** Not-null value. */
    private String player_id;
    /** Not-null value. */
    private String team_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FormationDBDao myDao;

    private Player player;
    private String player__resolvedKey;

    private Team team;
    private String team__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public FormationDB() {
    }

    public FormationDB(String uuid) {
        this.uuid = uuid;
    }

    public FormationDB(String uuid, String description, String image, String name, String player_id, String team_id) {
        this.uuid = uuid;
        this.description = description;
        this.image = image;
        this.name = name;
        this.player_id = player_id;
        this.team_id = team_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFormationDBDao() : null;
    }

    /** Not-null value. */
    public String getUuid() {
        return uuid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public String getPlayer_id() {
        return player_id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPlayer_id(String player_id) {
        this.player_id = player_id;
    }

    /** Not-null value. */
    public String getTeam_id() {
        return team_id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTeam_id(String team_id) {
        this.team_id = team_id;
    }

    /** To-one relationship, resolved on first access. */
    public Player getPlayer() {
        String __key = this.uuid;
        if (player__resolvedKey == null || player__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlayerDao targetDao = daoSession.getPlayerDao();
            Player playerNew = targetDao.load(__key);
            synchronized (this) {
                player = playerNew;
            	player__resolvedKey = __key;
            }
        }
        return player;
    }

    public void setPlayer(Player player) {
        if (player == null) {
            throw new DaoException("To-one property 'uuid' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.player = player;
            uuid = player.getUuid();
            player__resolvedKey = uuid;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Team getTeam() {
        String __key = this.uuid;
        if (team__resolvedKey == null || team__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TeamDao targetDao = daoSession.getTeamDao();
            Team teamNew = targetDao.load(__key);
            synchronized (this) {
                team = teamNew;
            	team__resolvedKey = __key;
            }
        }
        return team;
    }

    public void setTeam(Team team) {
        if (team == null) {
            throw new DaoException("To-one property 'uuid' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.team = team;
            uuid = team.getUuid();
            team__resolvedKey = uuid;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
