package com.kinth.football.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kinth.football.dao.CommentDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table COMMENT_DB.
*/
public class CommentDBDao extends AbstractDao<CommentDB, String> {

    public static final String TABLENAME = "COMMENT_DB";

    /**
     * Properties of entity CommentDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uuid = new Property(0, String.class, "uuid", true, "UUID");
        public final static Property ReplyToPlayerUuid = new Property(1, String.class, "replyToPlayerUuid", false, "REPLY_TO_PLAYER_UUID");
        public final static Property SharingUuid = new Property(2, String.class, "sharingUuid", false, "SHARING_UUID");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Comment = new Property(4, String.class, "comment", false, "COMMENT");
        public final static Property PlayerUuid = new Property(5, String.class, "playerUuid", false, "PLAYER_UUID");
        public final static Property Date = new Property(6, Long.class, "date", false, "DATE");
    };


    public CommentDBDao(DaoConfig config) {
        super(config);
    }
    
    public CommentDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COMMENT_DB' (" + //
                "'UUID' TEXT PRIMARY KEY NOT NULL ," + // 0: uuid
                "'REPLY_TO_PLAYER_UUID' TEXT," + // 1: replyToPlayerUuid
                "'SHARING_UUID' TEXT," + // 2: sharingUuid
                "'TYPE' TEXT," + // 3: type
                "'COMMENT' TEXT," + // 4: comment
                "'PLAYER_UUID' TEXT," + // 5: playerUuid
                "'DATE' INTEGER);"); // 6: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COMMENT_DB'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CommentDB entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUuid());
 
        String replyToPlayerUuid = entity.getReplyToPlayerUuid();
        if (replyToPlayerUuid != null) {
            stmt.bindString(2, replyToPlayerUuid);
        }
 
        String sharingUuid = entity.getSharingUuid();
        if (sharingUuid != null) {
            stmt.bindString(3, sharingUuid);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(5, comment);
        }
 
        String playerUuid = entity.getPlayerUuid();
        if (playerUuid != null) {
            stmt.bindString(6, playerUuid);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(7, date);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CommentDB readEntity(Cursor cursor, int offset) {
        CommentDB entity = new CommentDB( //
            cursor.getString(offset + 0), // uuid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // replyToPlayerUuid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sharingUuid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // comment
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // playerUuid
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CommentDB entity, int offset) {
        entity.setUuid(cursor.getString(offset + 0));
        entity.setReplyToPlayerUuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSharingUuid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setComment(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPlayerUuid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDate(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(CommentDB entity, long rowId) {
        return entity.getUuid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(CommentDB entity) {
        if(entity != null) {
            return entity.getUuid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
