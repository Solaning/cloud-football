package com.kinth.football.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kinth.football.dao.Chat;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CHAT.
*/
public class ChatDao extends AbstractDao<Chat, Long> {

    public static final String TABLENAME = "CHAT";

    /**
     * Properties of entity Chat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Conversationid = new Property(1, String.class, "conversationid", false, "CONVERSATIONID");
        public final static Property Belongaccount = new Property(2, String.class, "belongaccount", false, "BELONGACCOUNT");
        public final static Property Belongnick = new Property(3, String.class, "belongnick", false, "BELONGNICK");
        public final static Property Belongavatar = new Property(4, String.class, "belongavatar", false, "BELONGAVATAR");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
        public final static Property Belongid = new Property(6, String.class, "belongid", false, "BELONGID");
        public final static Property Status = new Property(7, Integer.class, "status", false, "STATUS");
        public final static Property Msgtype = new Property(8, Integer.class, "msgtype", false, "MSGTYPE");
        public final static Property Msgtime = new Property(9, String.class, "msgtime", false, "MSGTIME");
    };


    public ChatDao(DaoConfig config) {
        super(config);
    }
    
    public ChatDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHAT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CONVERSATIONID' TEXT," + // 1: conversationid
                "'BELONGACCOUNT' TEXT," + // 2: belongaccount
                "'BELONGNICK' TEXT," + // 3: belongnick
                "'BELONGAVATAR' TEXT," + // 4: belongavatar
                "'CONTENT' TEXT NOT NULL ," + // 5: content
                "'BELONGID' TEXT NOT NULL ," + // 6: belongid
                "'STATUS' INTEGER," + // 7: status
                "'MSGTYPE' INTEGER," + // 8: msgtype
                "'MSGTIME' TEXT);"); // 9: msgtime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHAT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Chat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String conversationid = entity.getConversationid();
        if (conversationid != null) {
            stmt.bindString(2, conversationid);
        }
 
        String belongaccount = entity.getBelongaccount();
        if (belongaccount != null) {
            stmt.bindString(3, belongaccount);
        }
 
        String belongnick = entity.getBelongnick();
        if (belongnick != null) {
            stmt.bindString(4, belongnick);
        }
 
        String belongavatar = entity.getBelongavatar();
        if (belongavatar != null) {
            stmt.bindString(5, belongavatar);
        }
        stmt.bindString(6, entity.getContent());
        stmt.bindString(7, entity.getBelongid());
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(8, status);
        }
 
        Integer msgtype = entity.getMsgtype();
        if (msgtype != null) {
            stmt.bindLong(9, msgtype);
        }
 
        String msgtime = entity.getMsgtime();
        if (msgtime != null) {
            stmt.bindString(10, msgtime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Chat readEntity(Cursor cursor, int offset) {
        Chat entity = new Chat( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // conversationid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // belongaccount
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // belongnick
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // belongavatar
            cursor.getString(offset + 5), // content
            cursor.getString(offset + 6), // belongid
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // status
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // msgtype
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // msgtime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Chat entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setConversationid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBelongaccount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBelongnick(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBelongavatar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContent(cursor.getString(offset + 5));
        entity.setBelongid(cursor.getString(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setMsgtype(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setMsgtime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Chat entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Chat entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
