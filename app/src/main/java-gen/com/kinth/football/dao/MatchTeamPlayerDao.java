package com.kinth.football.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.kinth.football.dao.MatchTeamPlayer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MATCH_TEAM_PLAYER.
*/
public class MatchTeamPlayerDao extends AbstractDao<MatchTeamPlayer, Long> {

    public static final String TABLENAME = "MATCH_TEAM_PLAYER";

    /**
     * Properties of entity MatchTeamPlayer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Player_id = new Property(1, String.class, "player_id", false, "PLAYER_ID");
        public final static Property Match_team_id = new Property(2, long.class, "match_team_id", false, "MATCH_TEAM_ID");
    };

    private Query<MatchTeamPlayer> player_MatchTeamPlayerListQuery;
    private Query<MatchTeamPlayer> matchTeam_MatchTeamPlayerListQuery;

    public MatchTeamPlayerDao(DaoConfig config) {
        super(config);
    }
    
    public MatchTeamPlayerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MATCH_TEAM_PLAYER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PLAYER_ID' TEXT NOT NULL ," + // 1: player_id
                "'MATCH_TEAM_ID' INTEGER NOT NULL );"); // 2: match_team_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MATCH_TEAM_PLAYER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MatchTeamPlayer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPlayer_id());
        stmt.bindLong(3, entity.getMatch_team_id());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MatchTeamPlayer readEntity(Cursor cursor, int offset) {
        MatchTeamPlayer entity = new MatchTeamPlayer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // player_id
            cursor.getLong(offset + 2) // match_team_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MatchTeamPlayer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlayer_id(cursor.getString(offset + 1));
        entity.setMatch_team_id(cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MatchTeamPlayer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MatchTeamPlayer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "matchTeamPlayerList" to-many relationship of Player. */
    public List<MatchTeamPlayer> _queryPlayer_MatchTeamPlayerList(String player_id) {
        synchronized (this) {
            if (player_MatchTeamPlayerListQuery == null) {
                QueryBuilder<MatchTeamPlayer> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Player_id.eq(null));
                player_MatchTeamPlayerListQuery = queryBuilder.build();
            }
        }
        Query<MatchTeamPlayer> query = player_MatchTeamPlayerListQuery.forCurrentThread();
        query.setParameter(0, player_id);
        return query.list();
    }

    /** Internal query to resolve the "matchTeamPlayerList" to-many relationship of MatchTeam. */
    public List<MatchTeamPlayer> _queryMatchTeam_MatchTeamPlayerList(long match_team_id) {
        synchronized (this) {
            if (matchTeam_MatchTeamPlayerListQuery == null) {
                QueryBuilder<MatchTeamPlayer> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Match_team_id.eq(null));
                matchTeam_MatchTeamPlayerListQuery = queryBuilder.build();
            }
        }
        Query<MatchTeamPlayer> query = matchTeam_MatchTeamPlayerListQuery.forCurrentThread();
        query.setParameter(0, match_team_id);
        return query.list();
    }

}
