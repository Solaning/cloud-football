package com.kinth.football.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kinth.football.dao.Team;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TEAM.
*/
public class TeamDao extends AbstractDao<Team, String> {

    public static final String TABLENAME = "TEAM";

    /**
     * Properties of entity Team.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uuid = new Property(0, String.class, "uuid", true, "UUID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Slogan = new Property(2, String.class, "slogan", false, "SLOGAN");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Badge = new Property(4, String.class, "badge", false, "BADGE");
        public final static Property FamilyPhoto = new Property(5, String.class, "familyPhoto", false, "FAMILY_PHOTO");
        public final static Property Date = new Property(6, Long.class, "date", false, "DATE");
        public final static Property CreatorUuid = new Property(7, String.class, "creatorUuid", false, "CREATOR_UUID");
        public final static Property FirstCaptainUuid = new Property(8, String.class, "firstCaptainUuid", false, "FIRST_CAPTAIN_UUID");
        public final static Property SecondCaptainUuid = new Property(9, String.class, "secondCaptainUuid", false, "SECOND_CAPTAIN_UUID");
        public final static Property ThirdCaptainUuid = new Property(10, String.class, "thirdCaptainUuid", false, "THIRD_CAPTAIN_UUID");
        public final static Property CityId = new Property(11, Integer.class, "cityId", false, "CITY_ID");
        public final static Property RegionId = new Property(12, Integer.class, "regionId", false, "REGION_ID");
        public final static Property HomeField = new Property(13, String.class, "homeField", false, "HOME_FIELD");
        public final static Property HomeJersey = new Property(14, String.class, "homeJersey", false, "HOME_JERSEY");
        public final static Property RoadJersey = new Property(15, String.class, "roadJersey", false, "ROAD_JERSEY");
        public final static Property AlternateJersey = new Property(16, String.class, "alternateJersey", false, "ALTERNATE_JERSEY");
        public final static Property Like = new Property(17, Integer.class, "like", false, "LIKE");
        public final static Property Liked = new Property(18, Boolean.class, "liked", false, "LIKED");
    };

    private DaoSession daoSession;


    public TeamDao(DaoConfig config) {
        super(config);
    }
    
    public TeamDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TEAM' (" + //
                "'UUID' TEXT PRIMARY KEY NOT NULL ," + // 0: uuid
                "'NAME' TEXT," + // 1: name
                "'SLOGAN' TEXT," + // 2: slogan
                "'DESCRIPTION' TEXT," + // 3: description
                "'BADGE' TEXT," + // 4: badge
                "'FAMILY_PHOTO' TEXT," + // 5: familyPhoto
                "'DATE' INTEGER," + // 6: date
                "'CREATOR_UUID' TEXT," + // 7: creatorUuid
                "'FIRST_CAPTAIN_UUID' TEXT," + // 8: firstCaptainUuid
                "'SECOND_CAPTAIN_UUID' TEXT," + // 9: secondCaptainUuid
                "'THIRD_CAPTAIN_UUID' TEXT," + // 10: thirdCaptainUuid
                "'CITY_ID' INTEGER," + // 11: cityId
                "'REGION_ID' INTEGER," + // 12: regionId
                "'HOME_FIELD' TEXT," + // 13: homeField
                "'HOME_JERSEY' TEXT," + // 14: homeJersey
                "'ROAD_JERSEY' TEXT," + // 15: roadJersey
                "'ALTERNATE_JERSEY' TEXT," + // 16: alternateJersey
                "'LIKE' INTEGER," + // 17: like
                "'LIKED' INTEGER);"); // 18: liked
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TEAM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Team entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUuid());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String slogan = entity.getSlogan();
        if (slogan != null) {
            stmt.bindString(3, slogan);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String badge = entity.getBadge();
        if (badge != null) {
            stmt.bindString(5, badge);
        }
 
        String familyPhoto = entity.getFamilyPhoto();
        if (familyPhoto != null) {
            stmt.bindString(6, familyPhoto);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(7, date);
        }
 
        String creatorUuid = entity.getCreatorUuid();
        if (creatorUuid != null) {
            stmt.bindString(8, creatorUuid);
        }
 
        String firstCaptainUuid = entity.getFirstCaptainUuid();
        if (firstCaptainUuid != null) {
            stmt.bindString(9, firstCaptainUuid);
        }
 
        String secondCaptainUuid = entity.getSecondCaptainUuid();
        if (secondCaptainUuid != null) {
            stmt.bindString(10, secondCaptainUuid);
        }
 
        String thirdCaptainUuid = entity.getThirdCaptainUuid();
        if (thirdCaptainUuid != null) {
            stmt.bindString(11, thirdCaptainUuid);
        }
 
        Integer cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindLong(12, cityId);
        }
 
        Integer regionId = entity.getRegionId();
        if (regionId != null) {
            stmt.bindLong(13, regionId);
        }
 
        String homeField = entity.getHomeField();
        if (homeField != null) {
            stmt.bindString(14, homeField);
        }
 
        String homeJersey = entity.getHomeJersey();
        if (homeJersey != null) {
            stmt.bindString(15, homeJersey);
        }
 
        String roadJersey = entity.getRoadJersey();
        if (roadJersey != null) {
            stmt.bindString(16, roadJersey);
        }
 
        String alternateJersey = entity.getAlternateJersey();
        if (alternateJersey != null) {
            stmt.bindString(17, alternateJersey);
        }
 
        Integer like = entity.getLike();
        if (like != null) {
            stmt.bindLong(18, like);
        }
 
        Boolean liked = entity.getLiked();
        if (liked != null) {
            stmt.bindLong(19, liked ? 1l: 0l);
        }
    }

    @Override
    protected void attachEntity(Team entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Team readEntity(Cursor cursor, int offset) {
        Team entity = new Team( //
            cursor.getString(offset + 0), // uuid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // slogan
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // badge
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // familyPhoto
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // date
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // creatorUuid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // firstCaptainUuid
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // secondCaptainUuid
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // thirdCaptainUuid
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // cityId
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // regionId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // homeField
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // homeJersey
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // roadJersey
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // alternateJersey
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // like
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0 // liked
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Team entity, int offset) {
        entity.setUuid(cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSlogan(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBadge(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFamilyPhoto(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDate(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setCreatorUuid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFirstCaptainUuid(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSecondCaptainUuid(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setThirdCaptainUuid(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCityId(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setRegionId(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setHomeField(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setHomeJersey(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRoadJersey(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAlternateJersey(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLike(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setLiked(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Team entity, long rowId) {
        return entity.getUuid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Team entity) {
        if(entity != null) {
            return entity.getUuid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
